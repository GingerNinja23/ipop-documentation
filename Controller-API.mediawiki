IPOP-Tincan provides a JSON-RPC API over UDP which enables developers
to extend the functionality of SocialVPN/GroupVPN. This page explain the
function calls available through the API.

= register_svc =
This function is designed to allow IPOP-Tincan to register to a
backend service which will be used to discover social peers and
bootstrap encrypted P2P connections. Since we currently only support
XMPP service, this is basically the XMPP username and password.

{| class="wikitable"
!Parameter
!Type
!Description
|-
|username
|string
|the username used to login to the XMPP service (e.g. username@gmail.com)
|-
|password
|string
|the password used to login to the XMPP service
|}

= create_link =
This call creates an encrypted P2P link with a P2P, it requires that the
controller provides a 40-byte hexadecimal UID, with an X509 fingerprint
along with optional STUN/TURN credentials.

{| class="wikitable"
!Parameter
!Type
!Description
|-
|overlay_id
|integer
|IPOP-Tincan will support multiple overlays in the future (e.g. XMPP, Gnunet)
so we need an ID for each overlay. Currently, we only support two hardcoded
IDs (0 for controller, 1 for XMPP service). For now, always set this to 1.
|-
|uid
|string
|every user has a unique identifier that is determined by the controller. This
identifier has to be a 40-byte long hexadecimal.
|-
|fpr
|string
|this is the X509 fingerprint (hash of X509 certificate) of the user. This is
obtained from the `get_state` api call described below. IPOP-Tincan generates
an X.509 certificate everytime it runs which resides in main memory.
|-
|stun
|string
|this parameter specifies the TURN server that will be used for this connection
(e.g. stun.google.com:19302). You can provide an empty string for this
parameter but the connection will only succeed if one of the two peers are
not behind a NAT.
|-
|turn
|string
|this parameter specifies the TURN server that will be used for this connection
(e.g. ip-of-turn-server:port). This can be an empty string and is only required
if both peers are behind symmetric NATs.
|-
|turn_user
|string
|the username for accessing the TURN server, can be empty string.
|-
|turn_pass
|string
|the password for accessing the TURN server, can be empty string.
|-
|cas
|string
|a specifially formatted string that contain a list of IP addresses and
connection credentials necessary for boostrapping an ICE connection.
[See ICE RFC](http://tools.ietf.org/html/rfc5245) for more information.
This is generated by IPOP-tincan.
|-
|sec
|boolean
|this parameter specifies whether or not the connection should be encrypted.
|}

= set_local_ip =
This call configures IPOP-Tincan ipop virtual NIC and set the UID of the local
peer. This call is important and has to be done first because it also triggers
the creation of X509 certificate and configure virtual NIC and operating
system for packet flow.

{| class="wikitable"
!Parameter
!Type
!Description
|-
|uid
|string
|the unique identifier for the local peer.
|-
|ip4
|string
|the IPv4 address for the ipop virtual NIC
|-
|ip6
|string
|the IPv6 address for the ipop virtual NIC
|-
|ip4_mask
|integer
|the prefix length for the network mask for the IPv4 address
(e.g. 16 means a.b.c.d/16)
|-
|ip6_mask
|integer
|the prefix length for the the network mask for the IPv6 address
|-
|subnet_mask
|integer
|the prefix length for the network mask for the IPv4 address of the
local router. In router mode, an IPOP-Tincan node routes packets
for more than one IP address, this parameter specifies the subnet
it should route for.
|}

= set_remote_ip =
This call essentially builds the routing that for IPOP-Tincan, it maps
IP addresses to remote peer uids and uids are mapped to P2P connections.
Thus this maps IP addresses to P2P connections.

{| class="wikitable"
!Parameter
!Type
!Description
|-
|uid
|string
|the unique identifier of the remote peer
|-
|ip4
|string
|the IPv4 address that the remote peer is mapped to, it should fall within
the subnet of the ipop virtual NIC defined in the ''create_link'' call.
|-
|ip6
|string
|the IPv6 address that the remote peer is mapped to, it should fall within
the subnet of the ipop virtual NIC defined in the ''create_link'' call.
|}


= trim_link =
The P2P library (libjingle) keeps tracks of live P2P connections by sending
a STUN requests over the link every 0.5 seconds which enables the detection of
dead links. A dead link triggers an dead connection event which updates the
status of a connection from online to offline. This trim call provides a 
mechanism to kill P2P connections whether they are online or offline.

{| class="wikitable"
!Parameter
!Type
!Description
|-
|uid
|string
|the unique identifier of the remote peer specifying which P2P connection to
kill
|}


= set_cb_endpoint =
IPOP-Tincan currently notifies the controller of two main events: 1) a
connection request/reply and 2) a link state change (i.e from online to
offline). This call registers the endpoint that IPOP-Tincan sends the
notifications to.

{| class="wikitable"
!Parameter
!Type
!Description
|-
|ip
|string
|the IP address of the controller
|-
|port
|integer
|the port number of the controller
|}

= send_msg =
This call allows the controller to send an arbitrary message to another
peer via the overlay specified by the overlay_id. This serves as a secondary
out-of-band channel to bootstrap P2P connections.

{| class="wikitable"
!Parameter
!Type
!Description
|-
|overlay_id
|integer
|this parameter specifies which overlay should be used to send the message.
This should be set to 1 because we only support ''send_msg'' over the XMPP
overlay.
|-
|uid
|string
|the unique identifier of the remote peer that will receive the message
|}


= set_logging =
By default, IPOP-Tincan prints various debugging messages to stdout, this
call allows developers to turn off logging.

{| class="wikitable"
!Parameter
!Type
!Description
|-
|flag
|integer
|if flag is less zero then logging is disabled.
|}

= getstate =
This is a very important call because it allows developers to query the
state of IPOP-Tincan. In return, IPOP-Tincan replies with the state of
the local peer and the state of each peer that attempted to connect.
If the uid of a remote peer is provided, then only the peer state of the
peer matching the uid is given. If it is an empty string, then all state
is returned.

{| class="wikitable"
!Parameter
!Type
!Description
|-
|uid
|string
|the unique identifier of the remote peer that we want state information
about. If this is an empty string, then all state is returned.
|}


