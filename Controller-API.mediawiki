IPOP-Tincan provides a JSON-RPC API over UDP which enables developers
to extend the functionality of SocialVPN/GroupVPN. This page explain the
function calls available through the API.

= Function: register_svc =
This function is designed to allow IPOP-Tincan to register to a
backend service which will be used to discover social peers and
bootstrap encrypted P2P connections. Since we currently only support
XMPP service, this is basically the XMPP username and password.

{| class="wikitable"
!Parameter
!Type
!Description
|-
|username
|string
|the username used to login to the XMPP service (e.g. username@gmail.com)
|-
|password
|string
|the password used to login to the XMPP service
|-
|host
|string
|the host name or IP address of the XMPP server (e.g. talk.google.com)
|}

= Function: set_local_ip =
This call configures IPOP-Tincan ipop virtual NIC and set the UID of the local
peer. This call is important and has to be done first because it also triggers
the creation of X509 certificate and configure virtual NIC and operating
system for packet flow.

{| class="wikitable"
!Parameter
!Type
!Description
|-
|uid
|string
|the unique identifier for the local peer, one example, is to use the
hexdigest of the sha1 hash module in Python.
|-
|ip4
|string
|the IPv4 address for the ipop virtual NIC
|-
|ip6
|string
|the IPv6 address for the ipop virtual NIC
|-
|ip4_mask
|integer
|the prefix length for the network mask for the IPv4 address
(e.g. 16 means a.b.c.d/16)
|-
|ip6_mask
|integer
|the prefix length for the the network mask for the IPv6 address
|-
|subnet_mask
|integer
|the prefix length for the network mask for the IPv4 address of the
local router. In router mode, an IPOP-Tincan node routes packets
for more than one IP address, this parameter specifies the subnet
it should route for. If not running in router mode, just set to 32.
|}

= Function: get_state =
This is a very important call because it allows developers to query the
state of IPOP-Tincan. In return, IPOP-Tincan replies with the state of
the local peer and the state of each peer that attempted to connect.
If the uid of a remote peer is provided, then only the peer state of the
peer matching the uid is given. If it is an empty string, then all state
is returned.

{| class="wikitable"
!Parameter
!Type
!Description
|-
|uid
|string
|the unique identifier of the remote peer that we want state information
about. If this is an empty string, then all state is returned.
|}

= Function: create_link =
This call creates an encrypted P2P link with a P2P, it requires that the
controller provides a 40-byte hexadecimal UID, with an X509 fingerprint
along with optional STUN/TURN credentials. The X509 fingerprint is
generated by IPOP-Tincan once the `set_local_ip` call is made. The
`get_state` call returns the X509 fingerprint as part of the *local_state*
message.

{| class="wikitable"
!Parameter
!Type
!Description
|-
|overlay_id
|integer
|IPOP-Tincan will support multiple overlays in the future (e.g. XMPP, Gnunet)
so we need an ID for each overlay. Currently, we only support two hardcoded
IDs (0 for controller, 1 for XMPP service). For now, always set this to 1.
|-
|uid
|string
|every user has a unique identifier that is determined by the controller. This
identifier has to be a 40-byte long hexadecimal. In the groupvpn controller
we use the *sha1* hash of the IPv4 address, in the socialvpn controller, we
use the *sha1* hash of the local hostname.
|-
|fpr
|string
|this is the X509 fingerprint (hash of X509 certificate) of the user. This is
obtained from the `get_state` api call described below. IPOP-Tincan generates
an X.509 certificate once the `set_local_ip` call is made.
|-
|stun
|string
|this parameter specifies the TURN server that will be used for this connection
(e.g. stun.google.com:19302). You can provide an empty string for this
parameter but the connection will only succeed if one of the two peers are
not behind a NAT.
|-
|turn
|string
|this parameter specifies the TURN server that will be used for this connection
(e.g. ip-of-turn-server:port). This can be an empty string and is only required
if both peers are behind symmetric NATs.
|-
|turn_user
|string
|the username for accessing the TURN server, can be empty string.
|-
|turn_pass
|string
|the password for accessing the TURN server, can be empty string.
|-
|cas
|string
|a specifially formatted string that contain a list of IP addresses and
connection credentials necessary for boostrapping an ICE connection.
[See ICE RFC](http://tools.ietf.org/html/rfc5245) for more information.
This is generated by IPOP-tincan.
|-
|sec
|boolean
|this parameter specifies whether or not the connection should be encrypted.
|}

= Function: set_remote_ip =
This call essentially builds the routing that for IPOP-Tincan, it maps
IP addresses to remote peer uids and uids are mapped to P2P connections.
Thus this maps IP addresses to P2P connections.

{| class="wikitable"
!Parameter
!Type
!Description
|-
|uid
|string
|the unique identifier of the remote peer
|-
|ip4
|string
|the IPv4 address that the remote peer is mapped to, it should fall within
the subnet of the ipop virtual NIC defined in the ''create_link'' call.
|-
|ip6
|string
|the IPv6 address that the remote peer is mapped to, it should fall within
the subnet of the ipop virtual NIC defined in the ''create_link'' call.
|}


= Function: trim_link =
This trim call provides a mechanism to kill P2P connections whether they are 
online or offline.

{| class="wikitable"
!Parameter
!Type
!Description
|-
|uid
|string
|the unique identifier of the remote peer specifying which P2P connection to
kill
|}


= Function: set_cb_endpoint =
IPOP-Tincan currently notifies the controller of two main events: 1) a
connection request/reply and 2) a link state change (i.e from online to
offline). This call registers the endpoint that IPOP-Tincan sends the
notifications to.

{| class="wikitable"
!Parameter
!Type
!Description
|-
|ip
|string
|the IP address of the controller
|-
|port
|integer
|the port number of the controller
|}

= Function: send_msg =
This call allows the controller to send an arbitrary message to another
peer via the overlay (i.e. XMPP service) specified by the overlay_id. This 
serves as a secondary out-of-band channel to bootstrap P2P connections.

{| class="wikitable"
!Parameter
!Type
!Description
|-
|overlay_id
|integer
|this parameter specifies which overlay should be used to send the message.
This should be set to 1 because we only support ''send_msg'' over the XMPP
overlay.
|-
|uid
|string
|the unique identifier of the remote peer that will receive the message
|}


= Function: set_logging =
By default, IPOP-Tincan prints various debugging messages to stdout, this
call allows developers to turn off logging.

{| class="wikitable"
!Parameter
!Type
!Description
|-
|logging
|integer
|sets the logging severity, 0 = no logging, 1 = error logging, 2 = info logging
|}

= Notification: local_state =
This notification is sent to the controller as a result of the ''get_state'' function
call. It contains information about the local node.

{| class="wikitable"
!Parameter
!Type
!Description
|-
|type
|string
|set to ''local_state'' to indicate that it contains information about the local node
|-
|_uid
|string
|the UID of the local node
|-
|_ip4
|string
|the IPv4 address of the local node
|-
|_ip6
|string
|the IPv6 address of the local node
|-
|_fpr
|string
|the X.509 certificate fingerprint of the local node
|}

= Notification: peer_state =
This notification is sent to the controller as a result of the ''get_state'' function
call. It contains information about a single peer node.

{| class="wikitable"
!Parameter
!Type
!Description
|-
|type
|string
|set to ''peer_state'' to indicate that it contains information about the peer node
|-
|uid
|string
|the UID of the peer node
|-
|ip4
|string
|the IPv4 address of the peer node
|-
|ip6
|string
|the IPv6 address of the peer node
|-
|fpr
|string
|the X.509 certificate fingerprint of the peer node
|-
|status
|string
|set to either ''online'' or ''offline''. It indicates whether the P2P connection is
alive and working
|-
|security
|string
|set to either ''none'' or ''dtls''. It indicates whether the P2P connection is encrypted or not
|-
|stats
|string
|long string delimited by '':''. It measures the number of bytes sent over the P2P connection
|-
|stats_cons
|string
|list of IP addresses showing the endpoints used for each connection
|}

= Notification: con_stat =
This notification is sent to the controller when a P2P connection changes state either
from ''unknown'' to ''online'' or ''offline''.

{| class="wikitable"
!Parameter
!Type
!Description
|-
|type
|string
|set to ''con_stat'' to indicate that it contains connection status information.
|-
|uid
|string
|the UID of the peer node
|-
|data
|string
|set to the current status either ''online'', ''offline'', or ''unknown''. Unknown means
the connection has just been initialized
|}

= Notification: con_req =
This notification is sent to the controller when a new node joins the network and also
represents the ping mechanism over XMPP; therefore controllers will see this message
every 120 seconds.

{| class="wikitable"
!Parameter
!Type
!Description
|-
|type
|string
|set to ''con_req'' to indicate that it is a connection request or ping message
|-
|uid
|string
|the UID of the peer node
|-
|data
|string
|contains the X.509 fingerprint of the peer node and optionally followed by ICE
information containing public IP address, credentials, and connection type
|}

= Notification: con_resp =
This notification is sent to the controller after a node has received a connection
request from the remote node.

{| class="wikitable"
!Parameter
!Type
!Description
|-
|type
|string
|set to ''con_resp'' to indicate that it is a connection response
|-
|uid
|string
|the UID of the peer node
|-
|data
|string
|contains the X.509 fingerprint of the peer node and followed by ICE
information containing public IP address, credentials, and connection type
|}